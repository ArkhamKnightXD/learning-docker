Docker compose es el que se debe de usar cuando necesitamos correr aplicaciones mas compleja, entonces de esta forma podemos decir que docker normal lo utilizamos para las aplicaciones simples. Por regla general cada contenedor solo debe de encargarse de proveer un solo servicio, osea que si tenemos una aplicacion con 2 servicio cada uno de esto debe de estar en 2 contenedores separados, pero debe de tener una forma de poder comunicarse entre si. 

El mejor ejemplo para definir esto es cuando tenemos una aplicacion en java que depende de la base de datos mysql(mariadb), entonces en un contenedor vamos a tener la aplicacion corriendo con openjdk y en el otro contenedor tendremos a mariadb haciendo de base de datos para nuestra aplicacion y todo esto debe de ser configurado mediante docker-compose.


La indentacion en el archivo docker-compose es importante, pues una falla de indentacion puede causar error en el archivo

Los comandos basicos de docker compose son estos:

docker-compose up: esto inicia todo los servicios


docker-compose up -d: Este comando sirve para iniciar todos los servicios y que cuando presion ctrl +c no se cierre


docker-compose down: Este comando sirve para detener todos los servicios en ejecucion


docker-compose config: Verifica que el archivo docker-compose.yml no tenga errores.


Ahora pasos para lograr hacer el contenedor de una aplicacion que utiliza spring-boot y mysql tomare como ejemplo los nombres que le puse a mi application


Paso 1:

Crear la network, ya que las aplicaciones deben de estar en la misma red, debemos de crear una y para esto utilizamos el siguiente comando: 


docker network create mysql-network



Paso 2: Modificar el application properties de nuestro proyecto para asi garantizar que se haga una correcta conexion con el contenedor que contiene nuestra base de datos los comandos para esto serian los siguientes

spring.datasource.url=jdbc:mysql://mysqldb/bootdb
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.platform=mysql
spring.datasource.initialization-mode=always


Paso 3: hacer el jar de la aplicacion 



paso 4: hacer el contenedor de nuestra aplicacion springboot mediante el jar que acabamos de crear con el comando:

docker build -t spring-practic4 .


Paso 5: probar que la conexion entre ambos contenedores este correcta y la aplicacion de esta forma suba de forma correcta para esto utilizamos estos comandos:


tener en cuenta que se debe de cambiar el nombre de la red y de la base de datos si vamos a usar esto en otro contenedor 

docker container run --name mysqldb3 --network practica4-mysql -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=practica4 -d mysql:8


aqui especificamos dos nombres el primero sera el nombre que tendra el contenedor y el del final el nombre de nuestra imagen es necesario ponerlos diferentes ya que aveces si se ponen iguales puede dar errores, nota importante se debe espera por lo menos 4 min antes de ejecutar este comando para que de esta forma estar seguros que el contenedor de la base de datos subio de forma correcta.

 docker container run --network practica4-mysql --name docker-spring-mysql-practica4 -p 8080:8080 -d spring-mysql-practica4



 Paso 6: Ya que todo funciona bien ahora nos encargamos de configurar nuestro archivo docker-compose.yml para que esta aplicacion este contenida en un solo archivo y pueda arrancar con un solo comando:


 en service especificamos los servicios que tendra nuestra aplicacion en este caso solo tiene 2 servicios el primero es el de spring-boot y el segundo es el de mysqldb1 al que le especifico la imagen que utilizaremos ademas de que a ambos servicios le especifico la network en la que estaran

cosas a tener en cuenta, si vamos a utilizar otra vez este archivo debemos de cambiar los nombre de las network y los nombres de cada servicio y obviamente el nombre  de la base de datos, cambiarle el nombre a las imagenes es algo opcional


 version: '3'

services:

  spring-boot:
    image: docker-spring-mysql2

    networks:
      - mysql-network

    ports:
      - "8080:8080"

    depends_on:
      - mysqldb1

  mysqldb1:
    image: mysql:8

    networks:
      - mysql-network

    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=bootdb  

networks:
  mysql-network:



Paso 7: Ejecutar el comando el docker-compose up para inicializar la aplicacion, importante este proceso debe de hacer dos veces la primera vez:

en el primer proceso la aplicacion nos dara error, pero no hsy problema con esto, pues debemos de dejar llegar este proceso hasta el final para que la base de datos se inicialice luego de que llegue al final presionamos ctrl +c y ejecutamos de nuevo el comando docker-compose up y listo la aplicacion iniciara de forma normal



